/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLElement {
    componentOnReady?: () => Promise<this | null>;
  }

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import '@ionic/core';
import 'ionicons';

import {
  DataRow,
} from './interfaces/interfaces';

declare global {

  namespace StencilComponents {
    interface AboutCellTemplates {

    }
  }

  interface HTMLAboutCellTemplatesElement extends StencilComponents.AboutCellTemplates, HTMLStencilElement {}

  var HTMLAboutCellTemplatesElement: {
    prototype: HTMLAboutCellTemplatesElement;
    new (): HTMLAboutCellTemplatesElement;
  };
  interface HTMLElementTagNameMap {
    'about-cell-templates': HTMLAboutCellTemplatesElement;
  }
  interface ElementTagNameMap {
    'about-cell-templates': HTMLAboutCellTemplatesElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'about-cell-templates': JSXElements.AboutCellTemplatesAttributes;
    }
  }
  namespace JSXElements {
    export interface AboutCellTemplatesAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface AboutNamedConfigurations {

    }
  }

  interface HTMLAboutNamedConfigurationsElement extends StencilComponents.AboutNamedConfigurations, HTMLStencilElement {}

  var HTMLAboutNamedConfigurationsElement: {
    prototype: HTMLAboutNamedConfigurationsElement;
    new (): HTMLAboutNamedConfigurationsElement;
  };
  interface HTMLElementTagNameMap {
    'about-named-configurations': HTMLAboutNamedConfigurationsElement;
  }
  interface ElementTagNameMap {
    'about-named-configurations': HTMLAboutNamedConfigurationsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'about-named-configurations': JSXElements.AboutNamedConfigurationsAttributes;
    }
  }
  namespace JSXElements {
    export interface AboutNamedConfigurationsAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppAuth {
      'displayScreen': string;
    }
  }

  interface HTMLAppAuthElement extends StencilComponents.AppAuth, HTMLStencilElement {}

  var HTMLAppAuthElement: {
    prototype: HTMLAppAuthElement;
    new (): HTMLAppAuthElement;
  };
  interface HTMLElementTagNameMap {
    'app-auth': HTMLAppAuthElement;
  }
  interface ElementTagNameMap {
    'app-auth': HTMLAppAuthElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-auth': JSXElements.AppAuthAttributes;
    }
  }
  namespace JSXElements {
    export interface AppAuthAttributes extends HTMLAttributes {
      'displayScreen'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppAuthcallback {

    }
  }

  interface HTMLAppAuthcallbackElement extends StencilComponents.AppAuthcallback, HTMLStencilElement {}

  var HTMLAppAuthcallbackElement: {
    prototype: HTMLAppAuthcallbackElement;
    new (): HTMLAppAuthcallbackElement;
  };
  interface HTMLElementTagNameMap {
    'app-authcallback': HTMLAppAuthcallbackElement;
  }
  interface ElementTagNameMap {
    'app-authcallback': HTMLAppAuthcallbackElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-authcallback': JSXElements.AppAuthcallbackAttributes;
    }
  }
  namespace JSXElements {
    export interface AppAuthcallbackAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppHeader {

    }
  }

  interface HTMLAppHeaderElement extends StencilComponents.AppHeader, HTMLStencilElement {}

  var HTMLAppHeaderElement: {
    prototype: HTMLAppHeaderElement;
    new (): HTMLAppHeaderElement;
  };
  interface HTMLElementTagNameMap {
    'app-header': HTMLAppHeaderElement;
  }
  interface ElementTagNameMap {
    'app-header': HTMLAppHeaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-header': JSXElements.AppHeaderAttributes;
    }
  }
  namespace JSXElements {
    export interface AppHeaderAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppHome {

    }
  }

  interface HTMLAppHomeElement extends StencilComponents.AppHome, HTMLStencilElement {}

  var HTMLAppHomeElement: {
    prototype: HTMLAppHomeElement;
    new (): HTMLAppHomeElement;
  };
  interface HTMLElementTagNameMap {
    'app-home': HTMLAppHomeElement;
  }
  interface ElementTagNameMap {
    'app-home': HTMLAppHomeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-home': JSXElements.AppHomeAttributes;
    }
  }
  namespace JSXElements {
    export interface AppHomeAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppRoot {

    }
  }

  interface HTMLAppRootElement extends StencilComponents.AppRoot, HTMLStencilElement {}

  var HTMLAppRootElement: {
    prototype: HTMLAppRootElement;
    new (): HTMLAppRootElement;
  };
  interface HTMLElementTagNameMap {
    'app-root': HTMLAppRootElement;
  }
  interface ElementTagNameMap {
    'app-root': HTMLAppRootElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-root': JSXElements.AppRootAttributes;
    }
  }
  namespace JSXElements {
    export interface AppRootAttributes extends HTMLAttributes {
      'onUserSignedOut'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface AppWelcome {

    }
  }

  interface HTMLAppWelcomeElement extends StencilComponents.AppWelcome, HTMLStencilElement {}

  var HTMLAppWelcomeElement: {
    prototype: HTMLAppWelcomeElement;
    new (): HTMLAppWelcomeElement;
  };
  interface HTMLElementTagNameMap {
    'app-welcome': HTMLAppWelcomeElement;
  }
  interface ElementTagNameMap {
    'app-welcome': HTMLAppWelcomeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'app-welcome': JSXElements.AppWelcomeAttributes;
    }
  }
  namespace JSXElements {
    export interface AppWelcomeAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface ConfigurationCreate {

    }
  }

  interface HTMLConfigurationCreateElement extends StencilComponents.ConfigurationCreate, HTMLStencilElement {}

  var HTMLConfigurationCreateElement: {
    prototype: HTMLConfigurationCreateElement;
    new (): HTMLConfigurationCreateElement;
  };
  interface HTMLElementTagNameMap {
    'configuration-create': HTMLConfigurationCreateElement;
  }
  interface ElementTagNameMap {
    'configuration-create': HTMLConfigurationCreateElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'configuration-create': JSXElements.ConfigurationCreateAttributes;
    }
  }
  namespace JSXElements {
    export interface ConfigurationCreateAttributes extends HTMLAttributes {
      'onConfigurationCreated'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ConfigurationEdit {
      'configurationName': string;
    }
  }

  interface HTMLConfigurationEditElement extends StencilComponents.ConfigurationEdit, HTMLStencilElement {}

  var HTMLConfigurationEditElement: {
    prototype: HTMLConfigurationEditElement;
    new (): HTMLConfigurationEditElement;
  };
  interface HTMLElementTagNameMap {
    'configuration-edit': HTMLConfigurationEditElement;
  }
  interface ElementTagNameMap {
    'configuration-edit': HTMLConfigurationEditElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'configuration-edit': JSXElements.ConfigurationEditAttributes;
    }
  }
  namespace JSXElements {
    export interface ConfigurationEditAttributes extends HTMLAttributes {
      'configurationName'?: string;
      'onConfigurationEdited'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface DataGrid {
      'getDataRows': () => DataRow[];
      'insertDataRow': (index?: number) => void;
      'loadDataRows': (dataRows: DataRow[]) => void;
    }
  }

  interface HTMLDataGridElement extends StencilComponents.DataGrid, HTMLStencilElement {}

  var HTMLDataGridElement: {
    prototype: HTMLDataGridElement;
    new (): HTMLDataGridElement;
  };
  interface HTMLElementTagNameMap {
    'data-grid': HTMLDataGridElement;
  }
  interface ElementTagNameMap {
    'data-grid': HTMLDataGridElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'data-grid': JSXElements.DataGridAttributes;
    }
  }
  namespace JSXElements {
    export interface DataGridAttributes extends HTMLAttributes {
      'onDataRowDeleted'?: (event: CustomEvent) => void;
      'onDataRowUpdated'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface DeleteAccount {
      'emailAddress': string;
    }
  }

  interface HTMLDeleteAccountElement extends StencilComponents.DeleteAccount, HTMLStencilElement {}

  var HTMLDeleteAccountElement: {
    prototype: HTMLDeleteAccountElement;
    new (): HTMLDeleteAccountElement;
  };
  interface HTMLElementTagNameMap {
    'delete-account': HTMLDeleteAccountElement;
  }
  interface ElementTagNameMap {
    'delete-account': HTMLDeleteAccountElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'delete-account': JSXElements.DeleteAccountAttributes;
    }
  }
  namespace JSXElements {
    export interface DeleteAccountAttributes extends HTMLAttributes {
      'emailAddress'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MyApp {

    }
  }

  interface HTMLMyAppElement extends StencilComponents.MyApp, HTMLStencilElement {}

  var HTMLMyAppElement: {
    prototype: HTMLMyAppElement;
    new (): HTMLMyAppElement;
  };
  interface HTMLElementTagNameMap {
    'my-app': HTMLMyAppElement;
  }
  interface ElementTagNameMap {
    'my-app': HTMLMyAppElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-app': JSXElements.MyAppAttributes;
    }
  }
  namespace JSXElements {
    export interface MyAppAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface SigninRegister {

    }
  }

  interface HTMLSigninRegisterElement extends StencilComponents.SigninRegister, HTMLStencilElement {}

  var HTMLSigninRegisterElement: {
    prototype: HTMLSigninRegisterElement;
    new (): HTMLSigninRegisterElement;
  };
  interface HTMLElementTagNameMap {
    'signin-register': HTMLSigninRegisterElement;
  }
  interface ElementTagNameMap {
    'signin-register': HTMLSigninRegisterElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'signin-register': JSXElements.SigninRegisterAttributes;
    }
  }
  namespace JSXElements {
    export interface SigninRegisterAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface UserAccount {

    }
  }

  interface HTMLUserAccountElement extends StencilComponents.UserAccount, HTMLStencilElement {}

  var HTMLUserAccountElement: {
    prototype: HTMLUserAccountElement;
    new (): HTMLUserAccountElement;
  };
  interface HTMLElementTagNameMap {
    'user-account': HTMLUserAccountElement;
  }
  interface ElementTagNameMap {
    'user-account': HTMLUserAccountElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'user-account': JSXElements.UserAccountAttributes;
    }
  }
  namespace JSXElements {
    export interface UserAccountAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface UserRegister {

    }
  }

  interface HTMLUserRegisterElement extends StencilComponents.UserRegister, HTMLStencilElement {}

  var HTMLUserRegisterElement: {
    prototype: HTMLUserRegisterElement;
    new (): HTMLUserRegisterElement;
  };
  interface HTMLElementTagNameMap {
    'user-register': HTMLUserRegisterElement;
  }
  interface ElementTagNameMap {
    'user-register': HTMLUserRegisterElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'user-register': JSXElements.UserRegisterAttributes;
    }
  }
  namespace JSXElements {
    export interface UserRegisterAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface UserSignin {

    }
  }

  interface HTMLUserSigninElement extends StencilComponents.UserSignin, HTMLStencilElement {}

  var HTMLUserSigninElement: {
    prototype: HTMLUserSigninElement;
    new (): HTMLUserSigninElement;
  };
  interface HTMLElementTagNameMap {
    'user-signin': HTMLUserSigninElement;
  }
  interface ElementTagNameMap {
    'user-signin': HTMLUserSigninElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'user-signin': JSXElements.UserSigninAttributes;
    }
  }
  namespace JSXElements {
    export interface UserSigninAttributes extends HTMLAttributes {
      'onUserSignedIn'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface UserVerification {
      'emailAddress': string;
    }
  }

  interface HTMLUserVerificationElement extends StencilComponents.UserVerification, HTMLStencilElement {}

  var HTMLUserVerificationElement: {
    prototype: HTMLUserVerificationElement;
    new (): HTMLUserVerificationElement;
  };
  interface HTMLElementTagNameMap {
    'user-verification': HTMLUserVerificationElement;
  }
  interface ElementTagNameMap {
    'user-verification': HTMLUserVerificationElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'user-verification': JSXElements.UserVerificationAttributes;
    }
  }
  namespace JSXElements {
    export interface UserVerificationAttributes extends HTMLAttributes {
      'emailAddress'?: string;
      'onVerificationSucceeded'?: (event: CustomEvent) => void;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
